Typescript
    - Superset of javascript.
    - A language build up on javascript(Not a new language).
    - Added new features and advantages to JS.
    - Its a compiler also.
    - Features are compiled to JS workarounds and possible errors are thrown.

Advantages
    - Types are added.
    - Interface and generics ara available.
    - Next generation JS features are available.
    - Meta programming features such as decorators are available.
    - Rich configuration options.
    - Modern tooling that helps even in non ts projects.

Core Data Types
    - number : All numbers, no differentiation between integer or float.
    - string : All text values.
    - boolean : Just true/false, no truthy and falsy values.


Important Note - The core primitive types in Typescript as all lowercase (string, number).

Type Inference
    - In typescript there are several places where type inference is used.
    - It provide type information when there is no explicit type annotation.
    - example : let x = 3;
    - The type of x variable is inferred to be number.

Objects
    - We can provide generic object type by adding "object" type to the variable.
    - If we want to provide proper object which contains specific member then we can put {} as type.
    - {} - Specialized object type notation.
    - Object types can also be created for nested Objects.

Array
    - Any javascript array, type can be flexible or strict(regarding the element types).
    - const arr:type[]

Tuple
    - If we want to restrict array with ref to number of elements and its types then we can use tuple.
    - In tuple we specify the type for each member.
    - let role:[string, number] = ["Pravin", 1]
    - push() : this method is exceptionally works on tuple, ts cannot catch this error.

Enum
    - Automatically enumerated global constant identifiers.
    - enum Name {name1, name2....namen} // Automatically assign the index values
    - If we want to explicitly specify value, we can -> enum Name{name1=value1,....,namen=valuen}

Any
    - Any kind of value, no specific type assignment.

Union
    - If we want to specify more than one type we can use union.
    - In this case we are fine with either of the mentioned data.
    - Compiler will not throw error if we used any one of it.
    - Pipe symbol (|) is used to union types in ts.

Literal
    - Literal is something that expect exactly same value which has been specified.
    - It may be specified single or multiple using union.


Type Aliases / Custom types
    - If we are using same union type in multiple places.
    - It is hectic to type whole union all the time.
    - Aliases is something which can overcome this problem.
    - We can specifiy the union type under a alias and use that alias wherever we want to use.
    - type keyword can be used to declare the alias to union.
    - we can create aliases for literal types too.
    - example : type User = {name:string; age:number} => const u1:user = {name: "Pravin", age:30} // this works

Function Return Type
    - By default ts Automatically infers the return type.
    - Also we can explicitly assign the return type to the function.
    - example: function name(params):returntype {...body...}
    - Ts also have void return type.

Functions as Types
    - Sometimes we create a reference to function.
    - By default any variable created in ts has type any.
    - After assigning function to variable one can assign any type of value to it.
    - This is not expected.
    - So typescript also introduces Function type.
    - we can specifiy the Function type to reference variable.
    - example : function add(){....} => let addDummy: Function = add;
    - We can also specify the function signature with (parameters)=>return type;

Callbacks
    - Ts function can expect cb.
    - Cb is expected to return nothing.
    - However if we returned anything it wont throw error.

Unknown
    - Unknow is a type in ts.
    - We can only assign unknow value to the variable having unknown type after checking its type.
    - It is preferrable than any.

Never type
    - never is another type that function returns.
    - utility functions like throwError or in general any functions that we know will never return anything.
    - Such functions can be assigned return type never.

-------------------------------------------------------------------------------------------------------------
THE TYPESCTIPT COMPILER AND ITS CONFIGURATIONS
-------------------------------------------------------------------------------------------------------------

Watch Mode
    - In watch mode compiler will Automatically detect changes in ts file.
    - And will recompile the file accordingly : tsc file.ts --watch
    - we can also watch directory in case we have multiple ts files.
    - To watch directory : tsc --init -> tsc --watch

Including and Excluding files
    - We can include or exclude file if we want it not to be watched.
    - In tsconfig.json => "exclude":[] or "include":[].

Setting Compilation Target
    - We can also set target that in which version of js the ts code should be translated.
    - Older browsers do not have support to es6+ so we can set target for es5.
    - How : in compilerOptions object in json => "target" : "es5"

Typescript Core Libraries
    - There is lib property in the json file.
    - By default it is commented so all the default libraries, js functions, dom apis are available.
    - If we uncomment that it will throw error.
    - we have to explicitly mention some libs there.

Source Map
    - helps us with debugging and development
    - sourceMap property in tsconfig.json
    - if we set sourceMap to true then *.js.map file will be generated.
    - we will have ts files in sources (in dev tool) after doing same.

NOTE 
    - ourDir : we can specify directory to store our compiled ts files.
    - rootDir :  we can set to set our source code directory.
    - removeComments : remove comments from ts
    - noEmit - do not generate js file

Strict Compilation
    - "strict": true,Enable all strict type-checking options.
    - "noImplicitAny": true,Enable error reporting for expressions and declarations with an implied `any` type..
    - "strictNullChecks": true,When type checking, take into account `null` and `undefined`. */
    - "strictFunctionTypes": true,When assigning functions, check to ensure parameters and the return values are subtype-compatible.
    - "strictBindCallApply": true, Check that the arguments for `bind`, `call`, and `apply` methods match the original function.
    - "strictPropertyInitialization": true, Check for class properties that are declared but not set in the constructor. 

Typescript Supports Modern JS features like : 
    - Arrow Functions.
    - Rest Operator.
    - Default Function parameters.
    - Rest parameters.

-------------------------------------------------------------------------------------------------------
CLASSES AND INTERFACES
-------------------------------------------------------------------------------------------------------
Classes : Blueprint for Objects (Definition of how object look like, which properties and methods they have)
Object : The things you work with in code, (Instance of classes)

Inheritance
    - we can inherit the properties of a class in another class with the help of extends keyword.
    - private members cannot be inherited hence we can add 'protected' access modifier to inherit it.

Getter :
    - getter method is defined with the keyword 'get' at the begining of it.
    - getter method has to return something.

Setter :
    - setter method id defined with the keyword 'set' at the begining.
    - setter method has to take atleast one argument.

Abstract Method:
    - If any of the member function of the class is asbstract then the class has to be abstract.
    - Abstract member function must be implemented in inherited class.
    - Abstract classes cant be instantiated.

Singleton and Private constructor
    - Singleton Pattern : Should have exactly only one instance of the class.
    - Make constructor private.
    - create static instance.
    - create private static method to get instance.
    - if instance is set return it.
    - else set new instance to that static instance variable and return it.
    - this is how singleton pattern is implemented to ensure only one object get created.

Interface
    - Interface describes the structure of the object.
    - we can create interface with the help of interface keyword.
    - we can specifiy members, member functions in interface.
    - example : greet() : void;
    - We can implement interface in a class.
    - We can implement interface using keyword implements.
    - We can extend interface in another interface.